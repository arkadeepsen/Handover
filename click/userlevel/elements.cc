/* Generated by "click-buildtool elem2export" on Mon May 13 15:22:07 IST 2019 */

#include <click/config.h>
#include <click/package.hh>
#include "../elements/analysis/adjusttimestamp.hh"
#include "../elements/analysis/aggcounter.hh"
#include "../elements/analysis/aggpktcounter.hh"
#include "../elements/analysis/aggregatefilter.hh"
#include "../elements/analysis/aggregatefirst.hh"
#include "../elements/analysis/aggregateip.hh"
#include "../elements/analysis/aggregateipaddrpair.hh"
#include "../elements/analysis/aggregateipflows.hh"
#include "../elements/analysis/aggregatelast.hh"
#include "../elements/analysis/aggregatelen.hh"
#include "../elements/analysis/aggregatepaint.hh"
#include "../elements/analysis/anonipaddr.hh"
#include "../elements/analysis/eraseippayload.hh"
#include "../elements/analysis/fromcapdump.hh"
#include "../elements/analysis/fromdagdump.hh"
#include "../elements/analysis/fromipsumdump.hh"
#include "../elements/analysis/fromnetflowsumdump.hh"
#include "../elements/analysis/fromnlanrdump.hh"
#include "../elements/analysis/fromtcpdump.hh"
#include "../elements/analysis/ipsumdump_anno.hh"
#include "../elements/analysis/ipsumdump_icmp.hh"
#include "../elements/analysis/ipsumdump_ip.hh"
#include "../elements/analysis/ipsumdump_link.hh"
#include "../elements/analysis/ipsumdump_payload.hh"
#include "../elements/analysis/ipsumdump_tcp.hh"
#include "../elements/analysis/ipsumdump_udp.hh"
#include "../elements/analysis/ipsumdumpinfo.hh"
#include "../elements/analysis/settimestampdelta.hh"
#include "../elements/analysis/storetimestamp.hh"
#include "../elements/analysis/storeudptimeseqrecord.hh"
#include "../elements/analysis/timefilter.hh"
#include "../elements/analysis/timerange.hh"
#include "../elements/analysis/timesortedsched.hh"
#include "../elements/analysis/timestampaccum.hh"
#include "../elements/analysis/toipflowdumps.hh"
#include "../elements/analysis/toipsumdump.hh"
#include "../elements/app/ftpportmapper.hh"
#include "../elements/aqm/adaptivered.hh"
#include "../elements/aqm/codel.hh"
#include "../elements/aqm/red.hh"
#include "../elements/ethernet/arpfaker.hh"
#include "../elements/ethernet/arpprint.hh"
#include "../elements/ethernet/arpquerier.hh"
#include "../elements/ethernet/arpresponder.hh"
#include "../elements/ethernet/arptable.hh"
#include "../elements/ethernet/checkarpheader.hh"
#include "../elements/ethernet/ensureether.hh"
#include "../elements/ethernet/etherencap.hh"
#include "../elements/ethernet/ethermirror.hh"
#include "../elements/ethernet/etherpausesource.hh"
#include "../elements/ethernet/etherrewrite.hh"
#include "../elements/ethernet/ethervlanencap.hh"
#include "../elements/ethernet/getetheraddress.hh"
#include "../elements/ethernet/hostetherfilter.hh"
#include "../elements/ethernet/setetheraddress.hh"
#include "../elements/ethernet/setvlananno.hh"
#include "../elements/ethernet/storeetheraddress.hh"
#include "../elements/ethernet/stripethervlanheader.hh"
#include "../elements/ethernet/vlandecap.hh"
#include "../elements/ethernet/vlanencap.hh"
#include "../elements/icmp/checkicmpheader.hh"
#include "../elements/icmp/icmperror.hh"
#include "../elements/icmp/icmpipencap.hh"
#include "../elements/icmp/icmppingencap.hh"
#include "../elements/icmp/icmppingresponder.hh"
#include "../elements/icmp/icmppingrewriter.hh"
#include "../elements/icmp/icmprewriter.hh"
#include "../elements/icmp/icmpsendpings.hh"
#include "../elements/ip/checkipheader.hh"
#include "../elements/ip/checkipheader2.hh"
#include "../elements/ip/decipttl.hh"
#include "../elements/ip/directiplookup.hh"
#include "../elements/ip/fixipsrc.hh"
#include "../elements/ip/getipaddress.hh"
#include "../elements/ip/ipaddrpairrewriter.hh"
#include "../elements/ip/ipaddrrewriter.hh"
#include "../elements/ip/ipclassifier.hh"
#include "../elements/ip/ipencap.hh"
#include "../elements/ip/ipfieldinfo.hh"
#include "../elements/ip/ipfilter.hh"
#include "../elements/ip/ipfragmenter.hh"
#include "../elements/ip/ipgwoptions.hh"
#include "../elements/ip/ipinputcombo.hh"
#include "../elements/ip/ipmirror.hh"
#include "../elements/ip/ipnameinfo.hh"
#include "../elements/ip/ipoutputcombo.hh"
#include "../elements/ip/ipprint.hh"
#include "../elements/ip/ipratemon.hh"
#include "../elements/ip/ipreassembler.hh"
#include "../elements/ip/iprwpatterns.hh"
#include "../elements/ip/lineariplookup.hh"
#include "../elements/ip/lookupiproute.hh"
#include "../elements/ip/lookupiproutelinux.hh"
#include "../elements/ip/lookupiproutemp.hh"
#include "../elements/ip/markipce.hh"
#include "../elements/ip/markipheader.hh"
#include "../elements/ip/radixiplookup.hh"
#include "../elements/ip/rangeiplookup.hh"
#include "../elements/ip/rfc2507c.hh"
#include "../elements/ip/rfc2507d.hh"
#include "../elements/ip/ripsend.hh"
#include "../elements/ip/rripmapper.hh"
#include "../elements/ip/setipaddress.hh"
#include "../elements/ip/setipchecksum.hh"
#include "../elements/ip/setipdscp.hh"
#include "../elements/ip/setipecn.hh"
#include "../elements/ip/setrandipaddress.hh"
#include "../elements/ip/siphmapper.hh"
#include "../elements/ip/sortediplookup.hh"
#include "../elements/ip/storeipaddress.hh"
#include "../elements/ip/stripipheader.hh"
#include "../elements/ip/truncateippayload.hh"
#include "../elements/ip/unstripipheader.hh"
#include "../elements/simple/simpleidle.hh"
#include "../elements/simple/simplepriosched.hh"
#include "../elements/simple/simplepullswitch.hh"
#include "../elements/simple/simplerrsched.hh"
#include <click/standard/addressinfo.hh>
#include "../elements/standard/align.hh"
#include <click/standard/alignmentinfo.hh>
#include "../elements/standard/annotationinfo.hh"
#include "../elements/standard/averagecounter.hh"
#include "../elements/standard/bandwidthmeter.hh"
#include "../elements/standard/bandwidthshaper.hh"
#include "../elements/standard/block.hh"
#include "../elements/standard/burster.hh"
#include "../elements/standard/bwratedsplitter.hh"
#include "../elements/standard/bwratedunqueue.hh"
#include "../elements/standard/bypass.hh"
#include "../elements/standard/checkcrc32.hh"
#include "../elements/standard/checklength.hh"
#include "../elements/standard/checkpaint.hh"
#include "../elements/standard/classifier.hh"
#include "../elements/standard/clickyinfo.hh"
#include "../elements/standard/clipboard.hh"
#include "../elements/standard/compblock.hh"
#include "../elements/standard/counter.hh"
#include "../elements/standard/cpuqueue.hh"
#include "../elements/standard/cpuswitch.hh"
#include "../elements/standard/delayshaper.hh"
#include "../elements/standard/delayunqueue.hh"
#include "../elements/standard/devirtualizeinfo.hh"
#include "../elements/standard/discard.hh"
#include "../elements/standard/discardnofree.hh"
#include "../elements/standard/drivermanager.hh"
#include "../elements/standard/dropbroadcasts.hh"
#include "../elements/standard/drr.hh"
#include <click/standard/errorelement.hh>
#include "../elements/standard/flowinfo.hh"
#include "../elements/standard/frontdropqueue.hh"
#include "../elements/standard/fullnotequeue.hh"
#include "../elements/standard/hashswitch.hh"
#include "../elements/standard/hub.hh"
#include "../elements/standard/idle.hh"
#include "../elements/standard/infinitesource.hh"
#include "../elements/standard/inputswitch.hh"
#include "../elements/standard/linkunqueue.hh"
#include "../elements/standard/markmacheader.hh"
#include "../elements/standard/messageelement.hh"
#include "../elements/standard/meter.hh"
#include "../elements/standard/mixedqueue.hh"
#include "../elements/standard/notifierqueue.hh"
#include "../elements/standard/nullelement.hh"
#include "../elements/standard/nulls.hh"
#include "../elements/standard/pad.hh"
#include "../elements/standard/paint.hh"
#include "../elements/standard/paintswitch.hh"
#include "../elements/standard/painttee.hh"
#include <click/standard/portinfo.hh>
#include "../elements/standard/print.hh"
#include "../elements/standard/priosched.hh"
#include "../elements/standard/pullswitch.hh"
#include "../elements/standard/quicknotequeue.hh"
#include "../elements/standard/quitwatcher.hh"
#include "../elements/standard/randomerror.hh"
#include "../elements/standard/randomsample.hh"
#include "../elements/standard/randomsource.hh"
#include "../elements/standard/randomswitch.hh"
#include "../elements/standard/ratedsource.hh"
#include "../elements/standard/ratedsplitter.hh"
#include "../elements/standard/ratedunqueue.hh"
#include "../elements/standard/resize.hh"
#include "../elements/standard/rrsched.hh"
#include "../elements/standard/rrswitch.hh"
#include <click/standard/scheduleinfo.hh>
#include "../elements/standard/script.hh"
#include "../elements/standard/setannobyte.hh"
#include "../elements/standard/setcrc32.hh"
#include "../elements/standard/setpackettype.hh"
#include "../elements/standard/settimestamp.hh"
#include "../elements/standard/shaper.hh"
#include "../elements/standard/simplequeue.hh"
#include "../elements/standard/staticpullswitch.hh"
#include "../elements/standard/staticswitch.hh"
#include "../elements/standard/storedata.hh"
#include "../elements/standard/stridesched.hh"
#include "../elements/standard/strideswitch.hh"
#include "../elements/standard/strip.hh"
#include "../elements/standard/striptonet.hh"
#include "../elements/standard/suppressor.hh"
#include "../elements/standard/switch.hh"
#include "../elements/standard/tee.hh"
#include "../elements/standard/threadsafequeue.hh"
#include "../elements/standard/timedsink.hh"
#include "../elements/standard/timedsource.hh"
#include "../elements/standard/timedunqueue.hh"
#include "../elements/standard/truncate.hh"
#include "../elements/standard/unqueue.hh"
#include "../elements/standard/unqueue2.hh"
#include "../elements/standard/unstrip.hh"
#include "../elements/tcpudp/checktcpheader.hh"
#include "../elements/tcpudp/checkudpheader.hh"
#include "../elements/tcpudp/dynudpipencap.hh"
#include "../elements/tcpudp/fasttcpflows.hh"
#include "../elements/tcpudp/fastudpflows.hh"
#include "../elements/tcpudp/iprewriter.hh"
#include "../elements/tcpudp/settcpchecksum.hh"
#include "../elements/tcpudp/setudpchecksum.hh"
#include "../elements/tcpudp/tcpfragmenter.hh"
#include "../elements/tcpudp/tcpipsend.hh"
#include "../elements/tcpudp/tcprewriter.hh"
#include "../elements/tcpudp/udpipencap.hh"
#include "../elements/tcpudp/udprewriter.hh"
#include "../elements/test/bhmtest.hh"
#include "../elements/test/biginttest.hh"
#include "../elements/test/bitvectortest.hh"
#include "../elements/test/blockthread.hh"
#include "../elements/test/checkpacket.hh"
#include "../elements/test/clptest.hh"
#include "../elements/test/comparepackets.hh"
#include "../elements/test/confparsetest.hh"
#include "../elements/test/cryptotest.hh"
#include "../elements/test/dequetest.hh"
#include "../elements/test/errortest.hh"
#include "../elements/test/functiontest.hh"
#include "../elements/test/handlertask.hh"
#include "../elements/test/hashtabletest.hh"
#include "../elements/test/heaptest.hh"
#include "../elements/test/listtest.hh"
#include "../elements/test/mtdietest.hh"
#include "../elements/test/neighborhoodtest.hh"
#include "../elements/test/notifierdebug.hh"
#include "../elements/test/notifiertest.hh"
#include "../elements/test/nulltask.hh"
#include "../elements/test/packettest.hh"
#include "../elements/test/queueyanktest.hh"
#include "../elements/test/randomseed.hh"
#include "../elements/test/schedordertest.hh"
#include "../elements/test/sorttest.hh"
#include "../elements/test/taskthreadtest.hh"
#include "../elements/test/timertest.hh"
#include "../elements/test/tokenbuckettest.hh"
#include "../elements/test/upstreamnotifier.hh"
#include "../elements/test/vectortest.hh"
#include "../elements/threads/spinlockacquire.hh"
#include "../elements/threads/spinlockinfo.hh"
#include "../elements/threads/spinlockpush.hh"
#include "../elements/threads/spinlockrelease.hh"
#include "../elements/threads/staticthreadsched.hh"
#include "../elements/userlevel/changeuid.hh"
#include "../elements/userlevel/chattersocket.hh"
#include "../elements/userlevel/controlsocket.hh"
#include "../elements/userlevel/fastudpsrc.hh"
#include "../elements/userlevel/fromdevice.hh"
#include "../elements/userlevel/fromdump.hh"
#include "../elements/userlevel/fromhost.hh"
#include "../elements/userlevel/fromrawsocket.hh"
#include "../elements/userlevel/fromsocket.hh"
#include "../elements/userlevel/ipflowrawsockets.hh"
#include "../elements/userlevel/kernelfilter.hh"
#include "../elements/userlevel/kerneltap.hh"
#include "../elements/userlevel/kerneltun.hh"
#include "../elements/userlevel/khandlerproxy.hh"
#include "../elements/userlevel/mcastsocket.hh"
#include "../elements/userlevel/progressbar.hh"
#include "../elements/userlevel/rawsocket.hh"
#include "../elements/userlevel/socket.hh"
#include "../elements/userlevel/todevice.hh"
#include "../elements/userlevel/todump.hh"
#include "../elements/userlevel/tohost.hh"
#include "../elements/userlevel/torawsocket.hh"
#include "../elements/userlevel/tosocket.hh"
#include "../elements/userlevel/umlswitch.hh"
#include "../elements/wifi/PrintSignalStrength.hh"
#include "../elements/wifi/ap/associationresponder.hh"
#include "../elements/wifi/ap/beaconsource.hh"
#include "../elements/wifi/ap/openauthresponder.hh"
#include "../elements/wifi/ap/proberesponder.hh"
#include "../elements/wifi/ap/stationtable.hh"
#include "../elements/wifi/athdescdecap.hh"
#include "../elements/wifi/athdescencap.hh"
#include "../elements/wifi/autoratefallback.hh"
#include "../elements/wifi/availablerates.hh"
#include "../elements/wifi/ethercount.hh"
#include "../elements/wifi/extradecap.hh"
#include "../elements/wifi/extraencap.hh"
#include "../elements/wifi/filterfailures.hh"
#include "../elements/wifi/filterphyerr.hh"
#include "../elements/wifi/filtertx.hh"
#include "../elements/wifi/fromhandler.hh"
#include "../elements/wifi/linktable.hh"
#include "../elements/wifi/madwifirate.hh"
#include "../elements/wifi/packetstore.hh"
#include "../elements/wifi/printtxfeedback.hh"
#include "../elements/wifi/printwifi.hh"
#include "../elements/wifi/prism2decap.hh"
#include "../elements/wifi/prism2encap.hh"
#include "../elements/wifi/probetxrate.hh"
#include "../elements/wifi/pushanno.hh"
#include "../elements/wifi/radiotapdecap.hh"
#include "../elements/wifi/radiotapencap.hh"
#include "../elements/wifi/readanno.hh"
#include "../elements/wifi/rxstats.hh"
#include "../elements/wifi/setnoack.hh"
#include "../elements/wifi/setrts.hh"
#include "../elements/wifi/settxpower.hh"
#include "../elements/wifi/settxrate.hh"
#include "../elements/wifi/station/associationrequester.hh"
#include "../elements/wifi/station/beaconscanner.hh"
#include "../elements/wifi/station/beacontracker.hh"
#include "../elements/wifi/station/openauthrequester.hh"
#include "../elements/wifi/station/proberequester.hh"
#include "../elements/wifi/wepdecap.hh"
#include "../elements/wifi/wepencap.hh"
#include "../elements/wifi/wifidecap.hh"
#include "../elements/wifi/wifidefrag.hh"
#include "../elements/wifi/wifidupefilter.hh"
#include "../elements/wifi/wifiencap.hh"
#include "../elements/wifi/wififragment.hh"
#include "../elements/wifi/wifiseq.hh"
#include "../elements/wifi/wirelessinfo.hh"
CLICK_USING_DECLS
static Element *
beetlemonkey(uintptr_t heywood)
{
  switch (heywood) {
   case 0: return new AdjustTimestamp;
   case 1: return new AggregateCounter;
   case 2: return new AggregatePacketCounter;
   case 3: return new AggregateFilter;
   case 4: return new AggregateFirst;
   case 5: return new AggregateIP;
   case 6: return new AggregateIPAddrPair;
   case 7: return new AggregateIPFlows;
   case 8: return new AggregateLast;
   case 9: return new AggregateLength;
   case 10: return new AggregatePaint;
   case 11: return new AnonymizeIPAddr;
   case 12: return new EraseIPPayload;
   case 13: return new FromCapDump;
   case 14: return new FromDAGDump;
   case 15: return new FromIPSummaryDump;
   case 16: return new FromNetFlowSummaryDump;
   case 17: return new FromNLANRDump;
   case 18: return new FromTcpdump;
   case 19: return new SetTimestampDelta;
   case 20: return new StoreTimestamp;
   case 21: return new StoreUDPTimeSeqRecord;
   case 22: return new TimeFilter;
   case 23: return new TimeRange;
   case 24: return new TimeSortedSched;
   case 25: return new TimestampAccum;
   case 26: return new ToIPFlowDumps;
   case 27: return new ToIPSummaryDump;
   case 28: return new FTPPortMapper;
   case 29: return new AdaptiveRED;
   case 30: return new CoDel;
   case 31: return new RED;
   case 32: return new ARPFaker;
   case 33: return new ARPPrint;
   case 34: return new ARPQuerier;
   case 35: return new ARPResponder;
   case 36: return new ARPTable;
   case 37: return new CheckARPHeader;
   case 38: return new EnsureEther;
   case 39: return new EtherEncap;
   case 40: return new EtherMirror;
   case 41: return new EtherPauseSource;
   case 42: return new EtherRewrite;
   case 43: return new EtherVLANEncap;
   case 44: return new EtherVLANEncap;
   case 45: return new GetEtherAddress;
   case 46: return new HostEtherFilter;
   case 47: return new SetEtherAddress;
   case 48: return new SetVLANAnno;
   case 49: return new SetVLANAnno;
   case 50: return new StoreEtherAddress;
   case 51: return new StripEtherVLANHeader;
   case 52: return new StripEtherVLANHeader;
   case 53: return new VLANDecap;
   case 54: return new VLANEncap;
   case 55: return new CheckICMPHeader;
   case 56: return new ICMPError;
   case 57: return new ICMPIPEncap;
   case 58: return new ICMPPingEncap;
   case 59: return new ICMPPingResponder;
   case 60: return new ICMPPingRewriter;
   case 61: return new ICMPRewriter;
   case 62: return new ICMPPingSource;
   case 63: return new ICMPPingSource;
   case 64: return new CheckIPHeader;
   case 65: return new CheckIPHeader2;
   case 66: return new DecIPTTL;
   case 67: return new DirectIPLookup;
   case 68: return new FixIPSrc;
   case 69: return new GetIPAddress;
   case 70: return new IPAddrPairRewriter;
   case 71: return new IPAddrRewriter;
   case 72: return new IPClassifier;
   case 73: return new IPEncap;
   case 74: return new IPFieldInfo;
   case 75: return new IPFilter;
   case 76: return new IPFragmenter;
   case 77: return new IPGWOptions;
   case 78: return new IPInputCombo;
   case 79: return new IPMirror;
   case 80: return new IPNameInfo;
   case 81: return new IPOutputCombo;
   case 82: return new IPPrint;
   case 83: return new IPRateMonitor;
   case 84: return new IPReassembler;
   case 85: return new IPRewriterPatterns;
   case 86: return new LinearIPLookup;
   case 87: return new StaticIPLookup;
   case 88: return new LinuxIPLookup;
   case 89: return new LookupIPRouteMP;
   case 90: return new MarkIPCE;
   case 91: return new MarkIPHeader;
   case 92: return new RadixIPLookup;
   case 93: return new RangeIPLookup;
   case 94: return new RFC2507c;
   case 95: return new RFC2507d;
   case 96: return new RIPSend;
   case 97: return new RoundRobinIPMapper;
   case 98: return new SetIPAddress;
   case 99: return new SetIPChecksum;
   case 100: return new SetIPDSCP;
   case 101: return new SetIPECN;
   case 102: return new SetRandIPAddress;
   case 103: return new SourceIPHashMapper;
   case 104: return new SortedIPLookup;
   case 105: return new StoreIPAddress;
   case 106: return new StripIPHeader;
   case 107: return new TruncateIPPayload;
   case 108: return new UnstripIPHeader;
   case 109: return new SimpleIdle;
   case 110: return new SimplePrioSched;
   case 111: return new SimplePullSwitch;
   case 112: return new SimpleRRSched;
   case 113: return new AddressInfo;
   case 114: return new Align;
   case 115: return new AlignmentInfo;
   case 116: return new AnnotationInfo;
   case 117: return new AverageCounter;
   case 118: return new BandwidthMeter;
   case 119: return new BandwidthShaper;
   case 120: return new Block;
   case 121: return new Burster;
   case 122: return new BandwidthRatedSplitter;
   case 123: return new BandwidthRatedUnqueue;
   case 124: return new Bypass;
   case 125: return new CheckCRC32;
   case 126: return new CheckLength;
   case 127: return new CheckPaint;
   case 128: return new Classifier;
   case 129: return new ClickyInfo;
   case 130: return new Clipboard;
   case 131: return new CompareBlock;
   case 132: return new Counter;
   case 133: return new CPUQueue;
   case 134: return new CPUSwitch;
   case 135: return new DelayShaper;
   case 136: return new DelayUnqueue;
   case 137: return new DevirtualizeInfo;
   case 138: return new Discard;
   case 139: return new DiscardNoFree;
   case 140: return new DriverManager;
   case 141: return new DropBroadcasts;
   case 142: return new DRRSched;
   case 143: return new ErrorElement;
   case 144: return new FlowInfo;
   case 145: return new FrontDropQueue;
   case 146: return new FullNoteQueue;
   case 147: return new FullNoteQueue;
   case 148: return new HashSwitch;
   case 149: return new Hub;
   case 150: return new Idle;
   case 151: return new InfiniteSource;
   case 152: return new InputSwitch;
   case 153: return new LinkUnqueue;
   case 154: return new MarkMACHeader;
   case 155: return new MessageElement;
   case 156: return new Meter;
   case 157: return new MixedQueue;
   case 158: return new NotifierQueue;
   case 159: return new NullElement;
   case 160: return new PushNullElement;
   case 161: return new PullNullElement;
   case 162: return new Null1;
   case 163: return new Null2;
   case 164: return new Null3;
   case 165: return new Null4;
   case 166: return new Null5;
   case 167: return new Null6;
   case 168: return new Null7;
   case 169: return new Null8;
   case 170: return new Pad;
   case 171: return new Paint;
   case 172: return new PaintSwitch;
   case 173: return new PaintTee;
   case 174: return new PortInfo;
   case 175: return new Print;
   case 176: return new PrioSched;
   case 177: return new PullSwitch;
   case 178: return new QuickNoteQueue;
   case 179: return new QuitWatcher;
   case 180: return new RandomBitErrors;
   case 181: return new RandomSample;
   case 182: return new RandomSource;
   case 183: return new RandomSwitch;
   case 184: return new RatedSource;
   case 185: return new RatedSplitter;
   case 186: return new RatedUnqueue;
   case 187: return new Resize;
   case 188: return new RRSched;
   case 189: return new RoundRobinSwitch;
   case 190: return new ScheduleInfo;
   case 191: return new Script;
   case 192: return new SetAnnoByte;
   case 193: return new SetCRC32;
   case 194: return new SetPacketType;
   case 195: return new SetTimestamp;
   case 196: return new Shaper;
   case 197: return new SimpleQueue;
   case 198: return new StaticPullSwitch;
   case 199: return new StaticSwitch;
   case 200: return new StoreData;
   case 201: return new StrideSched;
   case 202: return new StrideSwitch;
   case 203: return new Strip;
   case 204: return new StripToNetworkHeader;
   case 205: return new Suppressor;
   case 206: return new Switch;
   case 207: return new Tee;
   case 208: return new PullTee;
   case 209: return new ThreadSafeQueue;
   case 210: return new TimedSink;
   case 211: return new TimedSource;
   case 212: return new TimedUnqueue;
   case 213: return new Truncate;
   case 214: return new Unqueue;
   case 215: return new Unqueue2;
   case 216: return new Unstrip;
   case 217: return new CheckTCPHeader;
   case 218: return new CheckUDPHeader;
   case 219: return new DynamicUDPIPEncap;
   case 220: return new FastTCPFlows;
   case 221: return new FastUDPFlows;
   case 222: return new IPRewriter;
   case 223: return new SetTCPChecksum;
   case 224: return new SetUDPChecksum;
   case 225: return new TCPFragmenter;
   case 226: return new TCPIPSend;
   case 227: return new TCPRewriter;
   case 228: return new UDPIPEncap;
   case 229: return new UDPRewriter;
   case 230: return new BigHashMapTest;
   case 231: return new BigintTest;
   case 232: return new BitvectorTest;
   case 233: return new BlockThread;
   case 234: return new CheckPacket;
   case 235: return new CLPTest;
   case 236: return new ComparePackets;
   case 237: return new ConfParseTest;
   case 238: return new CryptoTest;
   case 239: return new DequeTest;
   case 240: return new ErrorTest;
   case 241: return new FunctionTest;
   case 242: return new HandlerTask;
   case 243: return new HashTableTest;
   case 244: return new HeapTest;
   case 245: return new ListTest;
   case 246: return new MTDieTest;
   case 247: return new NeighborhoodTest;
   case 248: return new NotifierDebug;
   case 249: return new NotifierTest;
   case 250: return new NullTask;
   case 251: return new PacketTest;
   case 252: return new QueueYankTest;
   case 253: return new RandomSeed;
   case 254: return new SchedOrderTest;
   case 255: return new SortTest;
   case 256: return new TaskThreadTest;
   case 257: return new TimerTest;
   case 258: return new TokenBucketTest;
   case 259: return new UpstreamNotifier;
   case 260: return new VectorTest;
   case 261: return new SpinlockAcquire;
   case 262: return new SpinlockInfo;
   case 263: return new SpinlockPush;
   case 264: return new SpinlockRelease;
   case 265: return new StaticThreadSched;
   case 266: return new ChangeUID;
   case 267: return new ChatterSocket;
   case 268: return new ControlSocket;
   case 269: return new FastUDPSource;
   case 270: return new FromDevice;
   case 271: return new FromDump;
   case 272: return new FromHost;
   case 273: return new FromRawSocket;
   case 274: return new FromSocket;
   case 275: return new IPFlowRawSockets;
   case 276: return new KernelFilter;
   case 277: return new KernelTap;
   case 278: return new KernelTun;
   case 279: return new KernelHandlerProxy;
   case 280: return new McastSocket;
   case 281: return new ProgressBar;
   case 282: return new RawSocket;
   case 283: return new Socket;
   case 284: return new ToDevice;
   case 285: return new ToDump;
   case 286: return new ToHost;
   case 287: return new ToRawSocket;
   case 288: return new ToSocket;
   case 289: return new UMLSwitch;
   case 290: return new PrintSignalStrength;
   case 291: return new AssociationResponder;
   case 292: return new BeaconSource;
   case 293: return new OpenAuthResponder;
   case 294: return new ProbeResponder;
   case 295: return new StationTable;
   case 296: return new AthdescDecap;
   case 297: return new AthdescEncap;
   case 298: return new AutoRateFallback;
   case 299: return new AvailableRates;
   case 300: return new EtherCount;
   case 301: return new ExtraDecap;
   case 302: return new ExtraEncap;
   case 303: return new FilterFailures;
   case 304: return new FilterPhyErr;
   case 305: return new FilterTX;
   case 306: return new FromHandler;
   case 307: return new LinkTable;
   case 308: return new MadwifiRate;
   case 309: return new PacketStore;
   case 310: return new PrintTXFeedback;
   case 311: return new PrintWifi;
   case 312: return new Prism2Decap;
   case 313: return new Prism2Encap;
   case 314: return new ProbeTXRate;
   case 315: return new PushAnno;
   case 316: return new RadiotapDecap;
   case 317: return new RadiotapEncap;
   case 318: return new ReadAnno;
   case 319: return new RXStats;
   case 320: return new SetNoAck;
   case 321: return new SetRTS;
   case 322: return new SetTXPower;
   case 323: return new SetTXRate;
   case 324: return new AssociationRequester;
   case 325: return new BeaconScanner;
   case 326: return new BeaconTracker;
   case 327: return new OpenAuthRequester;
   case 328: return new ProbeRequester;
   case 329: return new WepDecap;
   case 330: return new WepEncap;
   case 331: return new WifiDecap;
   case 332: return new WifiDefrag;
   case 333: return new WifiDupeFilter;
   case 334: return new WifiEncap;
   case 335: return new WifiFragment;
   case 336: return new WifiSeq;
   case 337: return new WirelessInfo;
   default: return 0;
  }
}

#ifdef CLICK_LINUXMODULE
#define click_add_element_type_stable(n, f, t) click_add_element_type_stable((n), (f), (t), 0)
#endif
void
click_export_elements()
{
  (void) click_add_element_type_stable("AdjustTimestamp", beetlemonkey, 0);
  (void) click_add_element_type_stable("AggregateCounter", beetlemonkey, 1);
  (void) click_add_element_type_stable("AggregatePacketCounter", beetlemonkey, 2);
  (void) click_add_element_type_stable("AggregateFilter", beetlemonkey, 3);
  (void) click_add_element_type_stable("AggregateFirst", beetlemonkey, 4);
  (void) click_add_element_type_stable("AggregateIP", beetlemonkey, 5);
  (void) click_add_element_type_stable("AggregateIPAddrPair", beetlemonkey, 6);
  (void) click_add_element_type_stable("AggregateIPFlows", beetlemonkey, 7);
  (void) click_add_element_type_stable("AggregateLast", beetlemonkey, 8);
  (void) click_add_element_type_stable("AggregateLength", beetlemonkey, 9);
  (void) click_add_element_type_stable("AggregatePaint", beetlemonkey, 10);
  (void) click_add_element_type_stable("AnonymizeIPAddr", beetlemonkey, 11);
  (void) click_add_element_type_stable("EraseIPPayload", beetlemonkey, 12);
  (void) click_add_element_type_stable("FromCapDump", beetlemonkey, 13);
  (void) click_add_element_type_stable("FromDAGDump", beetlemonkey, 14);
  (void) click_add_element_type_stable("FromIPSummaryDump", beetlemonkey, 15);
  (void) click_add_element_type_stable("FromNetFlowSummaryDump", beetlemonkey, 16);
  (void) click_add_element_type_stable("FromNLANRDump", beetlemonkey, 17);
  (void) click_add_element_type_stable("FromTcpdump", beetlemonkey, 18);
  IPSummaryDump_Anno::static_initialize();
  IPSummaryDump_ICMP::static_initialize();
  IPSummaryDump_IP::static_initialize();
  IPSummaryDump_Link::static_initialize();
  IPSummaryDump_Payload::static_initialize();
  IPSummaryDump_TCP::static_initialize();
  IPSummaryDump_UDP::static_initialize();
  (void) click_add_element_type_stable("SetTimestampDelta", beetlemonkey, 19);
  (void) click_add_element_type_stable("StoreTimestamp", beetlemonkey, 20);
  (void) click_add_element_type_stable("StoreUDPTimeSeqRecord", beetlemonkey, 21);
  (void) click_add_element_type_stable("TimeFilter", beetlemonkey, 22);
  (void) click_add_element_type_stable("TimeRange", beetlemonkey, 23);
  (void) click_add_element_type_stable("TimeSortedSched", beetlemonkey, 24);
  (void) click_add_element_type_stable("TimestampAccum", beetlemonkey, 25);
  (void) click_add_element_type_stable("ToIPFlowDumps", beetlemonkey, 26);
  (void) click_add_element_type_stable("ToIPSummaryDump", beetlemonkey, 27);
  (void) click_add_element_type_stable("FTPPortMapper", beetlemonkey, 28);
  (void) click_add_element_type_stable("AdaptiveRED", beetlemonkey, 29);
  (void) click_add_element_type_stable("CoDel", beetlemonkey, 30);
  (void) click_add_element_type_stable("RED", beetlemonkey, 31);
  (void) click_add_element_type_stable("ARPFaker", beetlemonkey, 32);
  (void) click_add_element_type_stable("ARPPrint", beetlemonkey, 33);
  (void) click_add_element_type_stable("ARPQuerier", beetlemonkey, 34);
  (void) click_add_element_type_stable("ARPResponder", beetlemonkey, 35);
  (void) click_add_element_type_stable("ARPTable", beetlemonkey, 36);
  (void) click_add_element_type_stable("CheckARPHeader", beetlemonkey, 37);
  (void) click_add_element_type_stable("EnsureEther", beetlemonkey, 38);
  (void) click_add_element_type_stable("EtherEncap", beetlemonkey, 39);
  (void) click_add_element_type_stable("EtherMirror", beetlemonkey, 40);
  (void) click_add_element_type_stable("EtherPauseSource", beetlemonkey, 41);
  (void) click_add_element_type_stable("EtherRewrite", beetlemonkey, 42);
  (void) click_add_element_type_stable("EtherVLANEncap", beetlemonkey, 43);
  (void) click_add_element_type_stable("EtherVlanEncap", beetlemonkey, 44);
  (void) click_add_element_type_stable("GetEtherAddress", beetlemonkey, 45);
  (void) click_add_element_type_stable("HostEtherFilter", beetlemonkey, 46);
  (void) click_add_element_type_stable("SetEtherAddress", beetlemonkey, 47);
  (void) click_add_element_type_stable("SetVLANAnno", beetlemonkey, 48);
  (void) click_add_element_type_stable("SetVlanAnno", beetlemonkey, 49);
  (void) click_add_element_type_stable("StoreEtherAddress", beetlemonkey, 50);
  (void) click_add_element_type_stable("StripEtherVLANHeader", beetlemonkey, 51);
  (void) click_add_element_type_stable("StripEtherVlanHeader", beetlemonkey, 52);
  (void) click_add_element_type_stable("VLANDecap", beetlemonkey, 53);
  (void) click_add_element_type_stable("VLANEncap", beetlemonkey, 54);
  (void) click_add_element_type_stable("CheckICMPHeader", beetlemonkey, 55);
  (void) click_add_element_type_stable("ICMPError", beetlemonkey, 56);
  (void) click_add_element_type_stable("ICMPIPEncap", beetlemonkey, 57);
  (void) click_add_element_type_stable("ICMPPingEncap", beetlemonkey, 58);
  (void) click_add_element_type_stable("ICMPPingResponder", beetlemonkey, 59);
  (void) click_add_element_type_stable("ICMPPingRewriter", beetlemonkey, 60);
  (void) click_add_element_type_stable("ICMPRewriter", beetlemonkey, 61);
  (void) click_add_element_type_stable("ICMPPingSource", beetlemonkey, 62);
  (void) click_add_element_type_stable("ICMPSendPings", beetlemonkey, 63);
  (void) click_add_element_type_stable("CheckIPHeader", beetlemonkey, 64);
  (void) click_add_element_type_stable("CheckIPHeader2", beetlemonkey, 65);
  (void) click_add_element_type_stable("DecIPTTL", beetlemonkey, 66);
  (void) click_add_element_type_stable("DirectIPLookup", beetlemonkey, 67);
  (void) click_add_element_type_stable("FixIPSrc", beetlemonkey, 68);
  (void) click_add_element_type_stable("GetIPAddress", beetlemonkey, 69);
  (void) click_add_element_type_stable("IPAddrPairRewriter", beetlemonkey, 70);
  (void) click_add_element_type_stable("IPAddrRewriter", beetlemonkey, 71);
  (void) click_add_element_type_stable("IPClassifier", beetlemonkey, 72);
  (void) click_add_element_type_stable("IPEncap", beetlemonkey, 73);
  (void) click_add_element_type_stable("IPFieldInfo", beetlemonkey, 74);
  IPFieldInfo::static_initialize();
  (void) click_add_element_type_stable("IPFilter", beetlemonkey, 75);
  IPFilter::static_initialize();
  (void) click_add_element_type_stable("IPFragmenter", beetlemonkey, 76);
  (void) click_add_element_type_stable("IPGWOptions", beetlemonkey, 77);
  (void) click_add_element_type_stable("IPInputCombo", beetlemonkey, 78);
  (void) click_add_element_type_stable("IPMirror", beetlemonkey, 79);
  (void) click_add_element_type_stable("IPNameInfo", beetlemonkey, 80);
  IPNameInfo::static_initialize();
  (void) click_add_element_type_stable("IPOutputCombo", beetlemonkey, 81);
  (void) click_add_element_type_stable("IPPrint", beetlemonkey, 82);
  (void) click_add_element_type_stable("IPRateMonitor", beetlemonkey, 83);
  (void) click_add_element_type_stable("IPReassembler", beetlemonkey, 84);
  (void) click_add_element_type_stable("IPRewriterPatterns", beetlemonkey, 85);
  (void) click_add_element_type_stable("LinearIPLookup", beetlemonkey, 86);
  (void) click_add_element_type_stable("StaticIPLookup", beetlemonkey, 87);
  (void) click_add_element_type_stable("LinuxIPLookup", beetlemonkey, 88);
  (void) click_add_element_type_stable("LookupIPRouteMP", beetlemonkey, 89);
  (void) click_add_element_type_stable("MarkIPCE", beetlemonkey, 90);
  (void) click_add_element_type_stable("MarkIPHeader", beetlemonkey, 91);
  (void) click_add_element_type_stable("RadixIPLookup", beetlemonkey, 92);
  (void) click_add_element_type_stable("RangeIPLookup", beetlemonkey, 93);
  (void) click_add_element_type_stable("RFC2507Comp", beetlemonkey, 94);
  (void) click_add_element_type_stable("RFC2507Decomp", beetlemonkey, 95);
  (void) click_add_element_type_stable("RIPSend", beetlemonkey, 96);
  (void) click_add_element_type_stable("RoundRobinIPMapper", beetlemonkey, 97);
  (void) click_add_element_type_stable("SetIPAddress", beetlemonkey, 98);
  (void) click_add_element_type_stable("SetIPChecksum", beetlemonkey, 99);
  (void) click_add_element_type_stable("SetIPDSCP", beetlemonkey, 100);
  (void) click_add_element_type_stable("SetIPECN", beetlemonkey, 101);
  (void) click_add_element_type_stable("SetRandIPAddress", beetlemonkey, 102);
  (void) click_add_element_type_stable("SourceIPHashMapper", beetlemonkey, 103);
  (void) click_add_element_type_stable("SortedIPLookup", beetlemonkey, 104);
  (void) click_add_element_type_stable("StoreIPAddress", beetlemonkey, 105);
  (void) click_add_element_type_stable("StripIPHeader", beetlemonkey, 106);
  (void) click_add_element_type_stable("TruncateIPPayload", beetlemonkey, 107);
  (void) click_add_element_type_stable("UnstripIPHeader", beetlemonkey, 108);
  (void) click_add_element_type_stable("SimpleIdle", beetlemonkey, 109);
  (void) click_add_element_type_stable("SimplePrioSched", beetlemonkey, 110);
  (void) click_add_element_type_stable("SimplePullSwitch", beetlemonkey, 111);
  (void) click_add_element_type_stable("SimpleRoundRobinSched", beetlemonkey, 112);
  (void) click_add_element_type_stable("AddressInfo", beetlemonkey, 113);
  (void) click_add_element_type_stable("Align", beetlemonkey, 114);
  (void) click_add_element_type_stable("AlignmentInfo", beetlemonkey, 115);
  (void) click_add_element_type_stable("AnnotationInfo", beetlemonkey, 116);
  (void) click_add_element_type_stable("AverageCounter", beetlemonkey, 117);
  (void) click_add_element_type_stable("BandwidthMeter", beetlemonkey, 118);
  (void) click_add_element_type_stable("BandwidthShaper", beetlemonkey, 119);
  (void) click_add_element_type_stable("Block", beetlemonkey, 120);
  (void) click_add_element_type_stable("Burster", beetlemonkey, 121);
  (void) click_add_element_type_stable("BandwidthRatedSplitter", beetlemonkey, 122);
  (void) click_add_element_type_stable("BandwidthRatedUnqueue", beetlemonkey, 123);
  (void) click_add_element_type_stable("Bypass", beetlemonkey, 124);
  (void) click_add_element_type_stable("CheckCRC32", beetlemonkey, 125);
  (void) click_add_element_type_stable("CheckLength", beetlemonkey, 126);
  (void) click_add_element_type_stable("CheckPaint", beetlemonkey, 127);
  (void) click_add_element_type_stable("Classifier", beetlemonkey, 128);
  (void) click_add_element_type_stable("ClickyInfo", beetlemonkey, 129);
  (void) click_add_element_type_stable("Clipboard", beetlemonkey, 130);
  (void) click_add_element_type_stable("CompareBlock", beetlemonkey, 131);
  (void) click_add_element_type_stable("Counter", beetlemonkey, 132);
  (void) click_add_element_type_stable("CPUQueue", beetlemonkey, 133);
  (void) click_add_element_type_stable("CPUSwitch", beetlemonkey, 134);
  (void) click_add_element_type_stable("DelayShaper", beetlemonkey, 135);
  (void) click_add_element_type_stable("DelayUnqueue", beetlemonkey, 136);
  (void) click_add_element_type_stable("DevirtualizeInfo", beetlemonkey, 137);
  (void) click_add_element_type_stable("Discard", beetlemonkey, 138);
  (void) click_add_element_type_stable("DiscardNoFree", beetlemonkey, 139);
  (void) click_add_element_type_stable("DriverManager", beetlemonkey, 140);
  (void) click_add_element_type_stable("DropBroadcasts", beetlemonkey, 141);
  (void) click_add_element_type_stable("DRRSched", beetlemonkey, 142);
  (void) click_add_element_type_stable("ErrorElement", beetlemonkey, 143);
  (void) click_add_element_type_stable("FlowInfo", beetlemonkey, 144);
  (void) click_add_element_type_stable("FrontDropQueue", beetlemonkey, 145);
  (void) click_add_element_type_stable("Queue", beetlemonkey, 146);
  (void) click_add_element_type_stable("FullNoteQueue", beetlemonkey, 147);
  (void) click_add_element_type_stable("HashSwitch", beetlemonkey, 148);
  (void) click_add_element_type_stable("Hub", beetlemonkey, 149);
  (void) click_add_element_type_stable("Idle", beetlemonkey, 150);
  (void) click_add_element_type_stable("InfiniteSource", beetlemonkey, 151);
  (void) click_add_element_type_stable("InputSwitch", beetlemonkey, 152);
  (void) click_add_element_type_stable("LinkUnqueue", beetlemonkey, 153);
  (void) click_add_element_type_stable("MarkMACHeader", beetlemonkey, 154);
  (void) click_add_element_type_stable("Message", beetlemonkey, 155);
  (void) click_add_element_type_stable("Meter", beetlemonkey, 156);
  (void) click_add_element_type_stable("MixedQueue", beetlemonkey, 157);
  (void) click_add_element_type_stable("NotifierQueue", beetlemonkey, 158);
  (void) click_add_element_type_stable("Null", beetlemonkey, 159);
  (void) click_add_element_type_stable("PushNull", beetlemonkey, 160);
  (void) click_add_element_type_stable("PullNull", beetlemonkey, 161);
  (void) click_add_element_type_stable("Null1", beetlemonkey, 162);
  (void) click_add_element_type_stable("Null2", beetlemonkey, 163);
  (void) click_add_element_type_stable("Null3", beetlemonkey, 164);
  (void) click_add_element_type_stable("Null4", beetlemonkey, 165);
  (void) click_add_element_type_stable("Null5", beetlemonkey, 166);
  (void) click_add_element_type_stable("Null6", beetlemonkey, 167);
  (void) click_add_element_type_stable("Null7", beetlemonkey, 168);
  (void) click_add_element_type_stable("Null8", beetlemonkey, 169);
  (void) click_add_element_type_stable("Pad", beetlemonkey, 170);
  (void) click_add_element_type_stable("Paint", beetlemonkey, 171);
  (void) click_add_element_type_stable("PaintSwitch", beetlemonkey, 172);
  (void) click_add_element_type_stable("PaintTee", beetlemonkey, 173);
  (void) click_add_element_type_stable("PortInfo", beetlemonkey, 174);
  (void) click_add_element_type_stable("Print", beetlemonkey, 175);
  (void) click_add_element_type_stable("PrioSched", beetlemonkey, 176);
  (void) click_add_element_type_stable("PullSwitch", beetlemonkey, 177);
  (void) click_add_element_type_stable("QuickNoteQueue", beetlemonkey, 178);
  (void) click_add_element_type_stable("QuitWatcher", beetlemonkey, 179);
  (void) click_add_element_type_stable("RandomBitErrors", beetlemonkey, 180);
  (void) click_add_element_type_stable("RandomSample", beetlemonkey, 181);
  (void) click_add_element_type_stable("RandomSource", beetlemonkey, 182);
  (void) click_add_element_type_stable("RandomSwitch", beetlemonkey, 183);
  (void) click_add_element_type_stable("RatedSource", beetlemonkey, 184);
  (void) click_add_element_type_stable("RatedSplitter", beetlemonkey, 185);
  (void) click_add_element_type_stable("RatedUnqueue", beetlemonkey, 186);
  (void) click_add_element_type_stable("Resize", beetlemonkey, 187);
  (void) click_add_element_type_stable("RoundRobinSched", beetlemonkey, 188);
  (void) click_add_element_type_stable("RoundRobinSwitch", beetlemonkey, 189);
  (void) click_add_element_type_stable("ScheduleInfo", beetlemonkey, 190);
  (void) click_add_element_type_stable("Script", beetlemonkey, 191);
  Script::static_initialize();
  (void) click_add_element_type_stable("SetAnnoByte", beetlemonkey, 192);
  (void) click_add_element_type_stable("SetCRC32", beetlemonkey, 193);
  (void) click_add_element_type_stable("SetPacketType", beetlemonkey, 194);
  (void) click_add_element_type_stable("SetTimestamp", beetlemonkey, 195);
  (void) click_add_element_type_stable("Shaper", beetlemonkey, 196);
  (void) click_add_element_type_stable("SimpleQueue", beetlemonkey, 197);
  (void) click_add_element_type_stable("StaticPullSwitch", beetlemonkey, 198);
  (void) click_add_element_type_stable("StaticSwitch", beetlemonkey, 199);
  (void) click_add_element_type_stable("StoreData", beetlemonkey, 200);
  (void) click_add_element_type_stable("StrideSched", beetlemonkey, 201);
  (void) click_add_element_type_stable("StrideSwitch", beetlemonkey, 202);
  (void) click_add_element_type_stable("Strip", beetlemonkey, 203);
  (void) click_add_element_type_stable("StripToNetworkHeader", beetlemonkey, 204);
  (void) click_add_element_type_stable("Suppressor", beetlemonkey, 205);
  (void) click_add_element_type_stable("Switch", beetlemonkey, 206);
  (void) click_add_element_type_stable("Tee", beetlemonkey, 207);
  (void) click_add_element_type_stable("PullTee", beetlemonkey, 208);
  (void) click_add_element_type_stable("ThreadSafeQueue", beetlemonkey, 209);
  (void) click_add_element_type_stable("TimedSink", beetlemonkey, 210);
  (void) click_add_element_type_stable("TimedSource", beetlemonkey, 211);
  (void) click_add_element_type_stable("TimedUnqueue", beetlemonkey, 212);
  (void) click_add_element_type_stable("Truncate", beetlemonkey, 213);
  (void) click_add_element_type_stable("Unqueue", beetlemonkey, 214);
  (void) click_add_element_type_stable("Unqueue2", beetlemonkey, 215);
  (void) click_add_element_type_stable("Unstrip", beetlemonkey, 216);
  (void) click_add_element_type_stable("CheckTCPHeader", beetlemonkey, 217);
  (void) click_add_element_type_stable("CheckUDPHeader", beetlemonkey, 218);
  (void) click_add_element_type_stable("DynamicUDPIPEncap", beetlemonkey, 219);
  (void) click_add_element_type_stable("FastTCPFlows", beetlemonkey, 220);
  (void) click_add_element_type_stable("FastUDPFlows", beetlemonkey, 221);
  (void) click_add_element_type_stable("IPRewriter", beetlemonkey, 222);
  (void) click_add_element_type_stable("SetTCPChecksum", beetlemonkey, 223);
  (void) click_add_element_type_stable("SetUDPChecksum", beetlemonkey, 224);
  (void) click_add_element_type_stable("TCPFragmenter", beetlemonkey, 225);
  (void) click_add_element_type_stable("TCPIPSend", beetlemonkey, 226);
  (void) click_add_element_type_stable("TCPRewriter", beetlemonkey, 227);
  (void) click_add_element_type_stable("UDPIPEncap", beetlemonkey, 228);
  (void) click_add_element_type_stable("UDPRewriter", beetlemonkey, 229);
  (void) click_add_element_type_stable("BigHashMapTest", beetlemonkey, 230);
  (void) click_add_element_type_stable("BigintTest", beetlemonkey, 231);
  (void) click_add_element_type_stable("BitvectorTest", beetlemonkey, 232);
  (void) click_add_element_type_stable("BlockThread", beetlemonkey, 233);
  (void) click_add_element_type_stable("CheckPacket", beetlemonkey, 234);
  (void) click_add_element_type_stable("CLPTest", beetlemonkey, 235);
  (void) click_add_element_type_stable("ComparePackets", beetlemonkey, 236);
  (void) click_add_element_type_stable("ConfParseTest", beetlemonkey, 237);
  (void) click_add_element_type_stable("CryptoTest", beetlemonkey, 238);
  (void) click_add_element_type_stable("DequeTest", beetlemonkey, 239);
  (void) click_add_element_type_stable("ErrorTest", beetlemonkey, 240);
  (void) click_add_element_type_stable("FunctionTest", beetlemonkey, 241);
  (void) click_add_element_type_stable("HandlerTask", beetlemonkey, 242);
  (void) click_add_element_type_stable("HashTableTest", beetlemonkey, 243);
  (void) click_add_element_type_stable("HeapTest", beetlemonkey, 244);
  (void) click_add_element_type_stable("ListTest", beetlemonkey, 245);
  (void) click_add_element_type_stable("MTDieTest", beetlemonkey, 246);
  (void) click_add_element_type_stable("NeighborhoodTest", beetlemonkey, 247);
  (void) click_add_element_type_stable("NotifierDebug", beetlemonkey, 248);
  (void) click_add_element_type_stable("NotifierTest", beetlemonkey, 249);
  (void) click_add_element_type_stable("NullTask", beetlemonkey, 250);
  (void) click_add_element_type_stable("PacketTest", beetlemonkey, 251);
  (void) click_add_element_type_stable("QueueYankTest", beetlemonkey, 252);
  (void) click_add_element_type_stable("RandomSeed", beetlemonkey, 253);
  (void) click_add_element_type_stable("SchedOrderTest", beetlemonkey, 254);
  (void) click_add_element_type_stable("SortTest", beetlemonkey, 255);
  (void) click_add_element_type_stable("TaskThreadTest", beetlemonkey, 256);
  (void) click_add_element_type_stable("TimerTest", beetlemonkey, 257);
  (void) click_add_element_type_stable("TokenBucketTest", beetlemonkey, 258);
  (void) click_add_element_type_stable("UpstreamNotifier", beetlemonkey, 259);
  (void) click_add_element_type_stable("VectorTest", beetlemonkey, 260);
  (void) click_add_element_type_stable("SpinlockAcquire", beetlemonkey, 261);
  (void) click_add_element_type_stable("SpinlockInfo", beetlemonkey, 262);
  (void) click_add_element_type_stable("SpinlockPush", beetlemonkey, 263);
  (void) click_add_element_type_stable("SpinlockRelease", beetlemonkey, 264);
  (void) click_add_element_type_stable("StaticThreadSched", beetlemonkey, 265);
  (void) click_add_element_type_stable("ChangeUID", beetlemonkey, 266);
  (void) click_add_element_type_stable("ChatterSocket", beetlemonkey, 267);
  (void) click_add_element_type_stable("ControlSocket", beetlemonkey, 268);
  (void) click_add_element_type_stable("FastUDPSource", beetlemonkey, 269);
  (void) click_add_element_type_stable("FromDevice", beetlemonkey, 270);
  (void) click_add_element_type_stable("FromDump", beetlemonkey, 271);
  (void) click_add_element_type_stable("FromHost", beetlemonkey, 272);
  (void) click_add_element_type_stable("FromRawSocket", beetlemonkey, 273);
  (void) click_add_element_type_stable("FromSocket", beetlemonkey, 274);
  (void) click_add_element_type_stable("IPFlowRawSockets", beetlemonkey, 275);
  (void) click_add_element_type_stable("KernelFilter", beetlemonkey, 276);
  (void) click_add_element_type_stable("KernelTap", beetlemonkey, 277);
  (void) click_add_element_type_stable("KernelTun", beetlemonkey, 278);
  (void) click_add_element_type_stable("KernelHandlerProxy", beetlemonkey, 279);
  (void) click_add_element_type_stable("McastSocket", beetlemonkey, 280);
  (void) click_add_element_type_stable("ProgressBar", beetlemonkey, 281);
  (void) click_add_element_type_stable("RawSocket", beetlemonkey, 282);
  (void) click_add_element_type_stable("Socket", beetlemonkey, 283);
  (void) click_add_element_type_stable("ToDevice", beetlemonkey, 284);
  (void) click_add_element_type_stable("ToDump", beetlemonkey, 285);
  (void) click_add_element_type_stable("ToHost", beetlemonkey, 286);
  (void) click_add_element_type_stable("ToRawSocket", beetlemonkey, 287);
  (void) click_add_element_type_stable("ToSocket", beetlemonkey, 288);
  (void) click_add_element_type_stable("UMLSwitch", beetlemonkey, 289);
  (void) click_add_element_type_stable("PrintSignalStrength", beetlemonkey, 290);
  (void) click_add_element_type_stable("AssociationResponder", beetlemonkey, 291);
  (void) click_add_element_type_stable("BeaconSource", beetlemonkey, 292);
  (void) click_add_element_type_stable("OpenAuthResponder", beetlemonkey, 293);
  (void) click_add_element_type_stable("ProbeResponder", beetlemonkey, 294);
  (void) click_add_element_type_stable("StationTable", beetlemonkey, 295);
  (void) click_add_element_type_stable("AthdescDecap", beetlemonkey, 296);
  (void) click_add_element_type_stable("AthdescEncap", beetlemonkey, 297);
  (void) click_add_element_type_stable("AutoRateFallback", beetlemonkey, 298);
  (void) click_add_element_type_stable("AvailableRates", beetlemonkey, 299);
  (void) click_add_element_type_stable("EtherCount", beetlemonkey, 300);
  (void) click_add_element_type_stable("ExtraDecap", beetlemonkey, 301);
  (void) click_add_element_type_stable("ExtraEncap", beetlemonkey, 302);
  (void) click_add_element_type_stable("FilterFailures", beetlemonkey, 303);
  (void) click_add_element_type_stable("FilterPhyErr", beetlemonkey, 304);
  (void) click_add_element_type_stable("FilterTX", beetlemonkey, 305);
  (void) click_add_element_type_stable("FromHandler", beetlemonkey, 306);
  (void) click_add_element_type_stable("LinkTable", beetlemonkey, 307);
  (void) click_add_element_type_stable("MadwifiRate", beetlemonkey, 308);
  (void) click_add_element_type_stable("PacketStore", beetlemonkey, 309);
  (void) click_add_element_type_stable("PrintTXFeedback", beetlemonkey, 310);
  (void) click_add_element_type_stable("PrintWifi", beetlemonkey, 311);
  (void) click_add_element_type_stable("Prism2Decap", beetlemonkey, 312);
  (void) click_add_element_type_stable("Prism2Encap", beetlemonkey, 313);
  (void) click_add_element_type_stable("ProbeTXRate", beetlemonkey, 314);
  (void) click_add_element_type_stable("PushAnno", beetlemonkey, 315);
  (void) click_add_element_type_stable("RadiotapDecap", beetlemonkey, 316);
  (void) click_add_element_type_stable("RadiotapEncap", beetlemonkey, 317);
  (void) click_add_element_type_stable("ReadAnno", beetlemonkey, 318);
  (void) click_add_element_type_stable("RXStats", beetlemonkey, 319);
  (void) click_add_element_type_stable("SetNoAck", beetlemonkey, 320);
  (void) click_add_element_type_stable("SetRTS", beetlemonkey, 321);
  (void) click_add_element_type_stable("SetTXPower", beetlemonkey, 322);
  (void) click_add_element_type_stable("SetTXRate", beetlemonkey, 323);
  (void) click_add_element_type_stable("AssociationRequester", beetlemonkey, 324);
  (void) click_add_element_type_stable("BeaconScanner", beetlemonkey, 325);
  (void) click_add_element_type_stable("BeaconTracker", beetlemonkey, 326);
  (void) click_add_element_type_stable("OpenAuthRequester", beetlemonkey, 327);
  (void) click_add_element_type_stable("ProbeRequester", beetlemonkey, 328);
  (void) click_add_element_type_stable("WepDecap", beetlemonkey, 329);
  (void) click_add_element_type_stable("WepEncap", beetlemonkey, 330);
  (void) click_add_element_type_stable("WifiDecap", beetlemonkey, 331);
  (void) click_add_element_type_stable("WifiDefrag", beetlemonkey, 332);
  (void) click_add_element_type_stable("WifiDupeFilter", beetlemonkey, 333);
  (void) click_add_element_type_stable("WifiEncap", beetlemonkey, 334);
  (void) click_add_element_type_stable("WifiFragment", beetlemonkey, 335);
  (void) click_add_element_type_stable("WifiSeq", beetlemonkey, 336);
  (void) click_add_element_type_stable("WirelessInfo", beetlemonkey, 337);
  CLICK_DMALLOC_REG("nXXX");
}

void
click_unexport_elements()
{
  IPSummaryDump_Anno::static_cleanup();
  IPSummaryDump_ICMP::static_cleanup();
  IPSummaryDump_IP::static_cleanup();
  IPSummaryDump_Link::static_cleanup();
  IPSummaryDump_Payload::static_cleanup();
  IPSummaryDump_TCP::static_cleanup();
  IPSummaryDump_UDP::static_cleanup();
  IPSummaryDumpInfo::static_cleanup();
  IPFieldInfo::static_cleanup();
  IPFilter::static_cleanup();
  IPNameInfo::static_cleanup();
  Script::static_cleanup();
}
